version: 2.1

orbs:
  go: circleci/go@1.11.0 # Goモジュールのダウンロード(キャッシュも使用)、go test実行を楽にする用
  slack: circleci/slack@4.13.3 # Slack通知用
  gcp-cli: circleci/gcp-cli@3.2.1 # gcloud CLIのインストール、初期化用

# 実行環境の定義
executors:
  go:
    docker:
      - image: cimg/go:1.22.5
  base:
    docker:
      - image: cimg/base:current

# step群の定義
commands:
  send-notification-with-slack:
    description: "Send notification with Slack"
    parameters:
      event:
        type: enum
        enum: [fail, pass, always]
        default: always
      message:
        type: string
        default: "No message"
    steps:
      - slack/notify:
          event: << parameters.event >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "<< parameters.message >>",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: $CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*User*: $CIRCLE_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  go-mod-download:
    description: "Download Go modules with cache and save cache with Go Orb"
    steps:
      - go/load-cache
      - go/mod-download
      - go/save-cache

  go-test:
    description: "Run go test with Go Orb"
    steps:
      - go/test:
          covermode: atomic
          failfast: true
          race: true

  setup-gcp-cli:
    description: "Install gcloud CLI and setup with environment name"
    steps:
      - gcp-cli/setup:
          gcloud_service_key: GCLOUD_SERVICE_KEY
          google_project_id: GOOGLE_PROJECT_ID
          google_compute_region: GOOGLE_COMPUTE_REGION
          google_compute_zone: GOOGLE_COMPUTE_ZONE

  load-gcp-environment-values:
    description: "Load GCP Environment Values as GCP_PJ_ID, GCP_REGION and GCP_ZONE. Note: setup-gcp-cli should be executed before this command"
    steps:
      - run:
          command: |
            echo "export GCP_PJ_ID=$(gcloud config get-value project)" >> $BASH_ENV
            echo "export GCP_REGION=$(gcloud config get-value compute/region)" >> $BASH_ENV
            echo "export GCP_ZONE=$(gcloud config get-value compute/zone)" >> $BASH_ENV

#  install-ko:
#    description: "Install ko"
#    steps:
#      - run: go install github.com/google/ko@latest

  docker-login-to-artifact-registry:
    description: "Login to Artifact Registry With Service Account Key"
    parameters:
      service_account_key:
        type: string
        default: ""
      location:
        description: "Artifact Registry location (ex. us-central1)"
        type: string
        default: ""
    steps:
      - run: echo << parameters.service_account_key >> | docker login -u _json_key --password-stdin https://<< parameters.location >>-docker.pkg.dev

  build-image:
    description: "Build Docker image"
    parameters:
      dockerfile_path:
        type: string
        default: ""
      image_name:
        type: string
        default: ""
    steps:
      - run:
          command: |
            docker build -f << parameters.dockerfile_path >> -t << parameters.image_name >> .

  push-image:
    description: "Push Docker image"
    parameters:
      image_name:
        type: string
        default: ""
    steps:
      - run:
          command: |
            docker push << parameters.image_name >>

jobs:
  send-notification-workflow-start:
    description: "Send workflow start notification with Slack"
    parameters:
      workflow-name:
        type: string
        default: "Workflow name undefined"
    executor: base
    steps:
      - send-notification-with-slack:
          message: "Workflow: << parameters.workflow-name >> Start"

  send-notification-workflow-success:
    description: "Send workflow success notification with Slack"
    parameters:
      workflow-name:
        type: string
        default: "Workflow name undefined"
    executor: base
    steps:
      - send-notification-with-slack:
          message: "Workflow: << parameters.workflow-name >> Success"

  build-and-test:
    executor: base
    steps:
      - checkout
      - setup_remote_docker
      - run: make docker-compose-circleci-up-d
      - run: make docker-go-test-serial
      - persist_to_workspace:
          root: ~/project
          paths: .
      - send-notification-with-slack:
          event: fail
          message: ":fire: CircleCI Job:${CIRCLE_JOB} (node${CIRCLE_NODE_INDEX}) failure ! :fire:"

#  build-image-and-deploy:
#    description: "Build Docker image and push it to Artifact Registry. After that, deploy to Cloud Run. (After that, release it optionally)"
#    executor: go
#    parameters:
#      should_release:
#        type: boolean
#        default: false
#    steps:
#      - checkout
#      - install-ko
#      - setup-gcp-cli
#      - load-gcp-environment-values
#      - run:
#          name: "Build Docker image and push to Artifact Registry"
#          command: |
#            echo "export IMAGE_NAME=$(KO_DOCKER_REPO=${GCP_REGION}-docker.pkg.dev/${GCP_PJ_ID}/api/sample_app ko build cmd/sample_app/main.go --bare)" >> $BASH_ENV
#      - unless:
#          condition: << parameters.should_release >>
#          steps:
#            - run:
#                name: "Deploy docker image to Cloud Run and release"
#                command: |
#                  gcloud run deploy api --image=${IMAGE_NAME} --project=${GCP_PJ_ID} --region=${GCP_REGION} --tag circleci-deploy
#      - when:
#          condition: << parameters.should_release >>
#          steps:
#            - run:
#                name: "Deploy docker image to Cloud Run and release"
#                command: |
#                  gcloud run deploy api --image=${IMAGE_NAME} --project=${GCP_PJ_ID} --region=${GCP_REGION} --no-traffic --tag circleci-deploy
#      - send-notification-with-slack:
#          event: fail
#          message: ":fire: CircleCI Job:${CIRCLE_JOB} failure ! :fire:"

  build-image-and-deploy:
    description: "Build Docker image and push it to Artifact Registry. After that, deploy to Cloud Run. (After that, release it optionally)"
    executor: base
    parameters:
      should_release:
        type: boolean
        default: false
    steps:
      - checkout
      - setup-gcp-cli
      - load-gcp-environment-values
      - run:
            name: "Set full image name for Artifact Registry"
            command: |
                echo "export IMAGE_NAME=${GCP_REGION}-docker.pkg.dev/${GCP_PJ_ID}/api/sample_app" >> $BASH_ENV
      - setup_remote_docker
      - docker-login-to-artifact-registry:
          service_account_key: ${GCLOUD_SERVICE_KEY}
          location: ${GCP_REGION}
      - build-image:
          dockerfile_path: "build/packages/docker/Dockerfile.sample_app"
          image_name: ${IMAGE_NAME}
      - push-image:
          image_name: ${IMAGE_NAME}
      - unless:
          condition: << parameters.should_release >>
          steps:
            - run:
                name: "Deploy docker image to Cloud Run"
                command: |
                  gcloud run deploy api --image=${IMAGE_NAME} --project=${GCP_PJ_ID} --region=${GCP_REGION} --tag circleci-deploy
      - when:
          condition: << parameters.should_release >>
          steps:
            - run:
                name: "Deploy docker image to Cloud Run and release"
                command: |
                  gcloud run deploy api --image=${IMAGE_NAME} --project=${GCP_PJ_ID} --region=${GCP_REGION} --no-traffic --tag circleci-deploy
      - send-notification-with-slack:
          event: fail
          message: ":fire: CircleCI Job:${CIRCLE_JOB} failure ! :fire:"
workflows:
  # masterブランチ以外
  build-and-test:
    jobs:
      - send-notification-workflow-start:
          workflow-name: "build-and-test"
          filters:
            branches:
              ignore:
                - master
      - build-and-test:
          requires:
            - send-notification-workflow-start
      # TODO: masterブランチ以外で動作確認するため一時的にジョブを追加
      - build-image-and-deploy:
          should_release: false
          requires:
            - build-and-test
      - send-notification-workflow-success:
          workflow-name: "build-and-test"
          requires:
            - build-and-test
  # masterブランチ用(デプロイまで行うがリリースはしない)
  build-and-test-and-deploy:
    jobs:
      - send-notification-workflow-start:
          workflow-name: "build-and-test-and-deploy"
          filters:
            branches:
              only:
                - master
      - build-and-test:
          requires:
            - send-notification-workflow-start
      - build-image-and-deploy:
          should_release: false
          requires:
            - build-and-test
      - send-notification-workflow-success:
          workflow-name: "build-and-test-and-deploy"
          requires:
            - build-image-and-deploy
